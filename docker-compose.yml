version: '3.7'

networks:
  mulesoft-network:
    driver: bridge
volumes:
  esdata:
    driver: local
  mulesoftlogs:
    driver: local
  kongdb:
    driver: local

services:

  kong-database:
    container_name: kong-database
    image: postgres:11-alpine
    restart: always
    networks:
    - mulesoft-network
    environment: 
    - POSTGRES_USER=kong
    - POSTGRES_DB=kong
    - POSTGRES_PASSWORD=kong
    - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - 5432:5432

  kong-migration:
    container_name: kong-migration
    image: kong:2.0.3-alpine
    command: kong migrations bootstrap
    networks:
    - mulesoft-network
    restart: on-failure
    environment: 
    - KONG_PG_HOST=kong-database
    links:
    - kong-database
    depends_on:
    - kong-database

  kong:
    container_name: kong
    image: kong:2.0.3-alpine
    restart: always
    environment:
    - KONG_DATABASE=postgres
    - KONG_PG_HOST=kong-database
    - KONG_PG_USER=kong
    - KONG_PG_PASSWORD=kong
    - KONG_PROXY_ACCESS_LOG=/dev/stdout
    - KONG_ADMIN_ACCESS_LOG=/dev/stdout
    - KONG_PROXY_ERROR_LOG=/dev/stderr
    - KONG_ADMIN_ERROR_LOG=/dev/stderr
    - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
    - KONG_DB_UPDATE_FREQUENCY=1m
    depends_on:
    - kong-migration
    ports:
    - 8000:8000
    - 8443:8443
    - 8001:8001
    - 8444:8444
    networks:
    - mulesoft-network

  konga-prepare:
    container_name: konga-prepare
    image: pantsel/konga:0.14.9
    command: -c prepare -a postgres -u postgresql://kong:kong@kong-database:5432/konga_db
    networks:
    - mulesoft-network
    restart: on-failure
    links:
    - kong-database
    depends_on:
    - kong-database
  
  konga:
    container_name: konga
    image: pantsel/konga:0.14.9
    restart: always
    networks:
    - mulesoft-network
    environment: 
    - DB_ADAPTER=postgres
    - DB_HOST=kong-database
    - DB_USER=kong
    - TOKEN_SECRET= ahfdjgjgf79JKLFHJKh978953kgdfjkl
    - DB_DATABASE=konga_db
    - NODE_ENV=production
    depends_on:
    - kong-database
    ports:
      - 1337:1337

  mulesoft:
    container_name: mulesoft
    build: ./docker/mulesoft
    restart: always
    ports:
    - 8081:8081
    networks:
    - mulesoft-network
    volumes:
    - ./volumes/mulesoft/apps:/opt/mule-standalone-4.2.0-hf1/apps
    - ./volumes/mulesoft/domains:/opt/mule-standalone-4.2.0-hf1/domains
    - mulesoftlogs:/opt/mule-standalone-4.2.0-hf1/logs

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    environment:
    # - node.name=elasticsearch
    # - discovery.seed_hosts=elasticsearch
    # - cluster.initial_master_nodes=elasticsearch
    # - cluster.name=docker-cluster
    - bootstrap.memory_lock=true
    - ES_JAVA_OPTS=-Xmx256m -Xms256m
    - ELASTIC_PASSWORD=changeme
    - discovery.type=single-node
    ports:
    - 9200:9200
    - 9300:9300
    networks:
    - mulesoft-network
    # volumes:
    # - ./volumes/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:7.10.2
    environment:
    # - bootstrap.memory_lock=true
    - LS_JAVA_OPTS=-Xmx256m -Xms256m
    - discovery.type=single-node
    ports:
    - 5044:5044
    - 5000:5000
    - 9600:9600
    # depends_on:
    # - elasticsearch
    networks:
    - mulesoft-network
    volumes:
    # - ./volumes/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    - ./volumes/logstash/pipeline:/usr/share/logstash/pipeline:ro

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.10.2
    ports:
    - 5601:5601
    environment: 
    - ELASTICSEARCH_URL="http://elasticsearch:9200"
    # depends_on:
    # - elasticsearch
    networks:
    - mulesoft-network
    # volumes:
    # - ./volumes/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro